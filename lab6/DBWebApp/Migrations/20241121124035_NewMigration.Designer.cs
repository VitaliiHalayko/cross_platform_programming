// <auto-generated />
using System;
using DBWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121124035_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBWebApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCustomerDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("PaymentMethodCode1");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DBWebApp.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTypeCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAddressFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAddressTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("PremiseId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("AddressTypeCode1");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("DBWebApp.Models.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDeliveredDatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderPlacedDatetime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderShippingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherOrderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderStatusCode");

                    b.HasIndex("ShippingMethodCode");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("DBWebApp.Models.MailshotCampaign", b =>
                {
                    b.Property<int>("MailshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailshotId"));

                    b.Property<DateTime>("MailshotEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailshotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailshotObjectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MailshotStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailshotTargetPopulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherMailshotDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailshotId");

                    b.ToTable("MailshotCampaigns");
                });

            modelBuilder.Entity("DBWebApp.Models.MailshotCustomer", b =>
                {
                    b.Property<int>("MailshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailshotId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OutcodeCustomerDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MailshotId");

                    b.ToTable("MailshotCustomers");
                });

            modelBuilder.Entity("DBWebApp.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<DateTime>("ItemDeliveredDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemOrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ItemStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("OrderItemStatusCode");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DBWebApp.Models.Premise", b =>
                {
                    b.Property<int>("PremiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PremiseId"));

                    b.Property<string>("PremiseDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiseTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PremiseId");

                    b.ToTable("Premises");
                });

            modelBuilder.Entity("DBWebApp.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("OtherProductDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DBWebApp.Models.RefAddressType", b =>
                {
                    b.Property<string>("AddressTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressTypeCode");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("DBWebApp.Models.RefOrderItemStatus", b =>
                {
                    b.Property<string>("OrderItemStatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderItemStatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderItemStatusCode");

                    b.ToTable("RefOrderItemStatuses");
                });

            modelBuilder.Entity("DBWebApp.Models.RefOrderStatus", b =>
                {
                    b.Property<string>("OrderStatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderStatusDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusCode");

                    b.ToTable("RefOrderStatuses");

                    b.HasData(
                        new
                        {
                            OrderStatusCode = "Cancelled",
                            OrderStatusDesc = "Cancelled"
                        },
                        new
                        {
                            OrderStatusCode = "Delivered",
                            OrderStatusDesc = "Delivered"
                        },
                        new
                        {
                            OrderStatusCode = "Paid",
                            OrderStatusDesc = "Paid"
                        });
                });

            modelBuilder.Entity("DBWebApp.Models.RefOutcomeCode", b =>
                {
                    b.Property<string>("OutcomeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OutcomeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutcomeCode");

                    b.ToTable("RefOutcomeCodes");
                });

            modelBuilder.Entity("DBWebApp.Models.RefPaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodCode");

                    b.ToTable("RefPaymentMethods");
                });

            modelBuilder.Entity("DBWebApp.Models.RefPremisesType", b =>
                {
                    b.Property<string>("PremisesTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PremisesTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PremisesTypeCode");

                    b.ToTable("RefPremisesTypes");
                });

            modelBuilder.Entity("DBWebApp.Models.RefProductCategory", b =>
                {
                    b.Property<string>("ProductCategoryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCategoryDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryCode");

                    b.ToTable("RefProductCategories");

                    b.HasData(
                        new
                        {
                            ProductCategoryCode = "ELEC",
                            ProductCategoryDesc = "Electronics"
                        },
                        new
                        {
                            ProductCategoryCode = "CLOTH",
                            ProductCategoryDesc = "Clothing"
                        });
                });

            modelBuilder.Entity("DBWebApp.Models.RefShippingMethod", b =>
                {
                    b.Property<string>("ShippingMethodCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ShippingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShippingMethodCode");

                    b.ToTable("RefShippingMethods");

                    b.HasData(
                        new
                        {
                            ShippingMethodCode = "FedEx",
                            ShippingCharges = 10.0m,
                            ShippingMethodDesc = "FedEx"
                        },
                        new
                        {
                            ShippingMethodCode = "UPS",
                            ShippingCharges = 15.0m,
                            ShippingMethodDesc = "UPS"
                        });
                });

            modelBuilder.Entity("DBWebApp.Models.Customer", b =>
                {
                    b.HasOne("DBWebApp.Models.RefPaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("DBWebApp.Models.CustomerAddress", b =>
                {
                    b.HasOne("DBWebApp.Models.RefAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("DBWebApp.Models.CustomerOrder", b =>
                {
                    b.HasOne("DBWebApp.Models.RefOrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBWebApp.Models.RefShippingMethod", "ShippingMethod")
                        .WithMany()
                        .HasForeignKey("ShippingMethodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("DBWebApp.Models.OrderItem", b =>
                {
                    b.HasOne("DBWebApp.Models.RefOrderItemStatus", "OrderItemStatus")
                        .WithMany()
                        .HasForeignKey("OrderItemStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBWebApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItemStatus");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DBWebApp.Models.Product", b =>
                {
                    b.HasOne("DBWebApp.Models.RefProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
